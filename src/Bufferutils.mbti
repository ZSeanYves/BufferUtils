package zseanyves/BufferUtils

// === 模块初始化函数 ===

/// 创建一个新的 BufferReader 实例
fn new_reader(Bytes) -> BufferReader

/// 创建一个新的 BufferWriter 实例（可指定初始容量）
fn new_writer(Int = ..) -> BufferWriter


// === 错误类型（from error.mbt） ===

type BufferOverflowError
impl Show for BufferOverflowError

type BufferUnderflowError
impl Show for BufferUnderflowError

type InvalidCapacityError
impl Show for InvalidCapacityError

type FlushError
impl Show for FlushError


// === 结构体定义（BufferReader / BufferWriter） ===

pub(all) struct BufferReader {
  buf : Bytes
  pos : Int
}
impl BufferReader {
  read_byte(Self) -> Int!
  peek(Self) -> Int!
  skip(Self, Int) -> Void
  is_empty(Self) -> Bool
  remaining(Self) -> Int
}


pub(all) struct BufferWriter {
  buf : Bytes
  pos : Int
  capacity : Int
}
impl BufferWriter {
  write_byte(Self, Int) -> Void!
  write_bytes(Self, Bytes) -> Void!
  flush(Self) -> Bytes!
  expand(Self, Int) -> Void!
  current_size(Self) -> Int
}


// === Trait 定义（from traits.mbt） ===

trait Flushable {
  flush(Self) -> Bytes!
}

trait Expandable {
  expand(Self, Int) -> Void
}
