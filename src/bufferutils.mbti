package ZSeanYves/bufferutils/lib

// ========== FINAL SAFE WRAPPER INTERFACES ==========

/// Read all bytes from Bytes input, return as Array[Byte]
pub fn readBytes(Bytes) -> Array[Byte]

/// Read bytes from Array[Byte] input
pub fn readBytesArray(Array[Byte]) -> Array[Byte]

/// Read from Array[Int] input, converted to bytes
pub fn readInts(Array[Int]) -> Array[Byte]

/// Read from String input, converted to bytes
pub fn readString(String) -> Array[Byte]

/// Write Bytes into buffer with flush, returns written result
pub fn writeBytes(Bytes, cap~ : Int = ..) -> Array[Byte]

/// Write and flush Bytes input, clear buffer afterward
pub fn writeBytesClear(Bytes, cap~ : Int = ..) -> Array[Byte]

/// Write Int array as bytes and flush, return as Array[Int]
pub fn writeInt(Array[Int], cap~ : Int = ..) -> Array[Int]

/// Write and flush Int array, clear buffer afterward
pub fn writeIntClear(Array[Int], cap~ : Int = ..) -> Array[Int]

/// Write string input as bytes and flush
pub fn writeString(String, cap~ : Int = ..) -> Array[Byte]

/// Write and flush string input, clear buffer afterward
pub fn writeStringClear(String, cap~ : Int = ..) -> Array[Byte]


// ========== ERROR TYPE DEFINITIONS ==========

/// Buffer read failed: reached the end or empty
pub type BufferUnderflowError String derive(Show)
impl show for BufferUnderflowError

/// Buffer write failed: capacity exceeded
pub type BufferOverflowError String derive(Show)
impl show for BufferOverflowError

/// Initialization failed: capacity invalid or negative
pub type InvalidCapacityError String derive(Show)
impl show for InvalidCapacityError

/// Flush failed: unknown error occurred during flush
pub type FlushError String derive(Show)
impl show for FlushError


// ========== STRUCT DEFINITIONS ==========

/// Buffer reader structure
pub struct BufferReader {
  buf: Bytes
  mut pos: Int
}

impl BufferReader {
  fn new_reader(buf: Bytes) -> BufferReader
  read_byte(Self) -> Byte!BufferUnderflowError
  peek(Self) -> Byte!BufferUnderflowError
  skip(Self, Int) -> Unit
  is_empty(Self) -> Bool
  remaining(Self) -> Int
  reader_rewind(Self) -> Unit
  reader_buffer(Self) -> Array[Byte]
}

/// Buffer writer structure
pub struct BufferWriter {
  mut buf: Array[Byte]
  mut pos: Int
  capacity: Int
}

impl BufferWriter {
  fn new_writer(cap~ : Int = ..) -> BufferWriter
  write_byte(Self, Byte) -> Unit!BufferOverflowError
  write_all(Self, Array[Byte]) -> Unit!BufferOverflowError
  flush(Self) -> Array[Byte]!FlushError
  clear(Self) -> Unit
  writer_rewind(Self) -> Unit
  writer_remaining(Self) -> Int
}


// ========== TRAIT INTERFACES ==========
