package "ZSeanYves/bufferutils"

// Values
fn readBytes(Bytes) -> Array[Byte]

fn readBytesArray(Array[Byte]) -> Array[Byte]

fn readInts(Array[Int]) -> Array[Byte]

fn readString(String) -> Array[Byte]

fn writeBytes(Bytes, cap~ : Int = ..) -> Array[Byte]

fn writeBytesClear(Bytes, cap~ : Int = ..) -> Array[Byte]

fn writeInt(Array[Int], cap~ : Int = ..) -> Array[Int]

fn writeIntClear(Array[Int], cap~ : Int = ..) -> Array[Int]

fn writeString(String, cap~ : Int = ..) -> Array[Byte]

fn writeStringClear(String, cap~ : Int = ..) -> Array[Byte]

// Types and methods
type BufferError

pub struct BufferReader {
  buf : Bytes
  mut pos : Int
}

pub struct BufferWriter {
  mut buf : Array[Byte]
  mut pos : Int
  capacity : Int
}

// Type aliases

// Traits
pub trait BufReadable {
  read_byte(Self) -> Byte!BufferError
  peek(Self) -> Byte!BufferError
  is_empty(Self) -> Bool
  reader_rewind(Self) -> Unit
  reader_remaining(Self) -> Int
  skip(Self, Int) -> Unit
}

pub trait BufWritable {
  write_byte(Self, Byte) -> Unit!BufferError
  write_all(Self, Array[Byte]) -> Unit!BufferError
  flush(Self) -> Array[Byte]!BufferError
  clear(Self) -> Unit
  writer_rewind(Self) -> Unit
  writer_remaining(Self) -> Int
}

